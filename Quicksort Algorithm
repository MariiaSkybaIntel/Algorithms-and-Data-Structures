/*This program uses Quicksort to perform a special sort on Strings
* first calculate the greatest character in a String ('a' being the lowest and 'z' being the highest)
* if the Strings have the same greatest character - compare them lexicographically
* return the sorted array*/

package quicksort;
import java.util.Scanner;

public class QuickSort 
{
	public static void main(String args[])
	{    
    //Alternatively, you can uncomment the lines below to read in an array of Strings
		//Scanner sc = new Scanner(System.in);
		/*int size = sc.nextInt(); //read in the size of array
    *for(int i=0;i<ar.length;i++) //populate the array with Strings to sort
		*{
		*	ar[i]=sc.next();
		*}
    *sc.close(); //close the scanner*/
    
    //or use this array
		String []ar = {"one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten"};
		
		
		int left = 0; //set the leftmost index to 0
		int right = ar.length-1;//set the rightmost index to the position of the last element in the array
		recQuickSort(ar,left,right); //call the method and pass in the array, and two indices
		
		
    //print the array
		for(int i=0;i<ar.length;i++)
		{
			System.out.println(ar[i]);
		}		
		
	}	
	
	public static void recQuickSort(String ar[], int left, int right) 
	{
		 if(right-left <= 0) // if size <= 1,
			 return; // already sorted
		 else // if array size is >=2
		 { 
			 String pivot = ar[right]; // set the pivot = to the rightmost String
			 int partition = partitionIt(ar, left, right, pivot); // find the partition range
			 recQuickSort(ar, left, partition-1); // sort left side
			 recQuickSort(ar, partition+1, right); // sort right side
		 }
	}

	
	public static int partitionIt(String ar[], int left, int right, String pivot)
	{
		 int leftSide = left-1; // left (after ++)
		 int rightSide = right; // right-1 (after --)
		 
		 while(true)
		 {
			 while(/*leftSide < rightSide && */compare(ar[++leftSide],pivot)==1) // scan to the left
			 {
				 
			 }
			 
			 while(rightSide > 0 && compare(ar[--rightSide],pivot)==2) // scan to the right
			 {
				 
			 }
			 
			 if(leftSide >= rightSide) // if pointers cross,
			 {
				 break;
			 }
				 
			 else //if the pointers haven't crossed do the swapping
				 {
					 swap(ar,rightSide, leftSide);
				 }				 
		 }
		 swap(ar,leftSide, right); //insert the pivot at the leftSide position
	 
		 return leftSide; // return pivot location
	}
	
	public static int compare(String x, String y)
	{
		String a = x.toLowerCase(); //ignore case when comparing
		String b = y.toLowerCase(); //ignore case when comparing
		int result = 0;
		if(greatestChar(a)<greatestChar(b)) //if string a contains greater character
		{
			result=1;
		}
		else if(greatestChar(a)>greatestChar(b)) //if string b contains greater character
		{
			result=2;
		}
		else// if a and b have the same greatest character  - compare them lexicographically
		{
			if(a.compareTo(b)<0) //if the second String comes first in the dictionary
			{
				result=1;
			}
			else if(a.compareTo(b)>=0) //if the second String comes second in the dictionary
			{
				result=2;
			}
		}		
		return result;		
	}
	
	
	public static int greatestChar(String s)
	{
		int greatest = (int)s.charAt(0); //let the first character be the greatest
		for(int i=0;i<s.length();i++)
		{			
			if((int)s.charAt(i)>greatest) //if found a greater char
			{
				greatest=(int)s.charAt(i); //make it the greatest
			}
		}
		return greatest;
	}
	
	public static String[] swap(String ar[], int index1, int index2)
	{
		String temp=ar[index1];
		ar[index1]=ar[index2];
		ar[index2]=temp;
		return ar;
	}
}
